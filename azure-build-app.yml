# Pipeline do budowania aplikacji .NET 8, uruchamiania testów i publikacji artefaktów ZIP

trigger:
  branches:
    include:
      - master
      - feature/*  # buduje też feature branche

pr:
  branches:
    include:
      - master

pool:
  vmImage: 'windows-latest'  # Używanie maszyny z Windows

variables:
  #solution: '**/*.sln'  # Ścieżka do pliku .sln
  #buildPlatform: 'Any CPU'
  #buildConfiguration: 'Release'
  #AZURE_CLIENT_ID: $(servicePrincipalId)
  #AZURE_CLIENT_SECRET: $(servicePrincipalKey)
  #AZURE_TENANT_ID: $(tenant_id)
  - group: infra-secrets            # >>> podpięcie Variable Group
  - name: solution
    value: '**/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'

  # mapowanie na Twoje stare nazwy (żeby reszta pliku została bez zmian)
  - name: AZURE_CLIENT_ID
    value: $(servicePrincipalId)
  - name: AZURE_CLIENT_SECRET
    value: $(servicePrincipalKey)
  - name: AZURE_TENANT_ID
    value: $(tenant_id)
  - name: AZURE_SUBSCRIPTION_ID
    value: $(subscription_id)

steps:
  - script: |
      if ($env:AZURE_CLIENT_ID)     { Write-Host "AZURE_CLIENT_ID: $($env:AZURE_CLIENT_ID.Substring(0,4))***" } else { Write-Host "AZURE_CLIENT_ID: MISSING" }
      if ($env:AZURE_TENANT_ID)     { Write-Host "AZURE_TENANT_ID: $($env:AZURE_TENANT_ID)" }
      if ($env:AZURE_SUBSCRIPTION_ID){ Write-Host "AZURE_SUBSCRIPTION_ID: $($env:AZURE_SUBSCRIPTION_ID)" }
      if ($env:AZURE_CLIENT_SECRET) { Write-Host "AZURE_CLIENT_SECRET set: $([bool]$env:AZURE_CLIENT_SECRET)" } else { Write-Host "AZURE_CLIENT_SECRET: MISSING" }
    displayName: "Debug env"
    env:
      AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
      AZURE_TENANT_ID: $(AZURE_TENANT_ID)

  # Krok 1: Instalacja .NET SDK
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.203'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  # Krok 2: Pobieranie sekretów z Azure Key Vault
  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'Road2Senior-NewConnection2025'
      KeyVaultName: 'apifootballkv'
      SecretsFilter: '*'
      RunAsPreJob: true

  # Krok 3: Restore dependencies
  - script: |
      dotnet restore
    displayName: 'Restore dependencies'

  # Krok 4: Build
  - script: |
      dotnet build --configuration $(buildConfiguration)
    displayName: 'Build project'

  # Krok 5: Testy jednostkowe
  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: '$(solution)'
      arguments: '--configuration $(buildConfiguration)'
    displayName: 'Run tests'
    env:
      AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
      AZURE_TENANT_ID: $(AZURE_TENANT_ID)

  # Krok 6: Publikacja projektu
  - script: |
      dotnet publish "$(Build.SourcesDirectory)/Road2Senior/Road2Senior.csproj" --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish
    displayName: 'Publish app'

  # Krok 7: Zip publikacji
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/publish.zip'
      replaceExistingArchive: true
    displayName: 'Zip published files'

  # Krok 8: Publikacja artefaktów
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish.zip'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish artifacts'
