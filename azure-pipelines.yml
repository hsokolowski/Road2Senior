# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master  # Uruchamianie pipeline przy pushu do brancha master

pool:
  vmImage: 'windows-latest'  # Używanie maszyny z Windows

variables:
  solution: '**/*.sln'  # Zmienna definiująca ścieżkę do pliku .sln
  buildPlatform: 'Any CPU'  # Platforma, na którą ma być budowany projekt
  buildConfiguration: 'Release'  # Konfiguracja builda (Debug/Release) 
  AZURE_CLIENT_ID: $(azureClientId)
  AZURE_CLIENT_SECRET: $(azureClientSecret)  # Upewnij się, że azureClientSecret jest ustawione w zmiennych pipeline
  AZURE_TENANT_ID: $(azureTenantId) 

steps:
# Krok 1: Instalacja .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.203'  # Używana wersja SDK .NET
    installationPath: $(Agent.ToolsDirectory)/dotnet  # Ścieżka instalacji SDK na maszynie builda

# Krok 2: Logowanie do Azure (potrzebne, aby pobierać sekrety z Key Vault)
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Road2Senior-Azure-ProdConnection'  # Nazwa połączenia z Azure DevOps
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az login --service-principal -u $(azureClientId) -p $(azureClientSecret) --tenant $(azureTenantId)
      echo "Zalogowano do Azure"

# Krok 3: Pobieranie kluczy z Azure Key Vault
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Road2Senior-Azure-ProdConnection'  # Nazwa połączenia z Azure DevOps
    KeyVaultName: 'apifootball'  # Nazwa Key Vault
    SecretsFilter: '*'  # Pobieranie wszystkich sekretów
    RunAsPreJob: true  # Zapewnienie, że klucze są pobierane przed właściwym buildem

# Krok 4: Przywracanie zależności
- script: |
    dotnet restore
  displayName: 'Restore dependencies'  # Wyświetlanie w logach: Przywracanie zależności

# Krok 5: Budowanie projektu
- script: |
    dotnet build --configuration $(buildConfiguration)
  displayName: 'Build project'  # Wyświetlanie w logach: Budowanie projektu

# Krok 6: Uruchamianie testów jednostkowych
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(solution)'  
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Run tests'  # Wyświetlanie w logach: Uruchamianie testów jednostkowych
  env:
    AZURE_CLIENT_ID: $(azureClientId)
    AZURE_CLIENT_SECRET: $(azureClientSecret)  # Upewnij się, że azureClientSecret jest ustawione w zmiennych pipeline
    AZURE_TENANT_ID: $(azureTenantId) 

# Krok 7: Publikacja artefaktów builda
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'  # Ścieżka do artefaktów, które mają być publikowane
    ArtifactName: 'drop'  # Nazwa artefaktu
    publishLocation: 'Container'  # Publikowanie artefaktów do kontenera