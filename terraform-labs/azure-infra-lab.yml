trigger: none

variables:
  - group: infra-secrets   # musi zawierać: servicePrincipalId, servicePrincipalKey, subscription_id, tenant_id, sql_admin_login, sql_admin_password, tfstate_access_key

parameters:
  - name: env_prefix
    displayName: 'Prefix środowiska'
    type: string
    default: 'lab1'
  - name: location
    displayName: 'Region'
    type: string
    default: 'polandcentral'
  - name: action
    displayName: 'Akcja'
    type: string
    default: 'apply'
    values: [apply, destroy]

  # Backend (używamy istniejącego RG/SA/Container proda, ale innego PLIKU stanu)
  - name: backend_rg
    type: string
    default: 'hus-dev'
  - name: backend_sa
    type: string
    default: 'tfstatehubert001'
  - name: backend_container
    type: string
    default: 'tfstate'
  - name: backend_key
    type: string
    default: 'labs/${{ parameters.env_prefix }}.tfstate'  # osobny plik stanu per lab

pool:
  vmImage: 'ubuntu-latest'

steps:
  - checkout: self

  - script: |
      echo "Installing Terraform 1.5.7"
      curl -s -o terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      unzip terraform.zip
      sudo mv terraform /usr/local/bin/
    displayName: 'Manual Install Terraform 1.5.7'

  # Bootstrap backend: RG + Storage + Container + RBAC dla SPN
  - task: AzureCLI@2
    displayName: 'Terraform ${{ parameters.action }} (infra-lab)'
    inputs:
      azureSubscription: 'Road2Senior-NewConnection2025'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euo pipefail
        export TF_IN_AUTOMATION=1

        TF_DIR="$(Build.SourcesDirectory)/terraform-labs"
        echo ">>> Using directory: $TF_DIR"

        echo ">>> terraform init (backend via access_key)"
        terraform -chdir="$TF_DIR" init -reconfigure \
          -input=false -no-color \
          -backend-config="resource_group_name=${{ parameters.backend_rg }}" \
          -backend-config="storage_account_name=${{ parameters.backend_sa }}" \
          -backend-config="container_name=${{ parameters.backend_container }}" \
          -backend-config="access_key=$(tfstate_access_key)" \
          -backend-config="key=${{ parameters.backend_key }}"

        # (opcjonalnie) workspaces — możesz usunąć, bo i tak rozdzielamy plikiem stanu
        echo ">>> terraform workspace select/create"
        terraform -chdir="$TF_DIR" workspace select "${{ parameters.env_prefix }}" || terraform -chdir="$TF_DIR" workspace new "${{ parameters.env_prefix }}"

        if [ "${{ parameters.action }}" = "apply" ]; then
          echo ">>> terraform plan"
          terraform -chdir="$TF_DIR" plan \
            -input=false -no-color \
            -var="env_prefix=${{ parameters.env_prefix }}" \
            -var="location=${{ parameters.location }}" \
            -out=tfplan

          echo ">>> terraform apply"
          terraform -chdir="$TF_DIR" apply -input=false -no-color -auto-approve tfplan

          echo ">>> terraform outputs"
          terraform -chdir="$TF_DIR" output
          terraform -chdir="$TF_DIR" output -json > $(Build.ArtifactStagingDirectory)/tf-outputs.json
        else
          echo ">>> terraform destroy"
          terraform -chdir="$TF_DIR" destroy -input=false -no-color -auto-approve \
            -var="env_prefix=${{ parameters.env_prefix }}" \
            -var="location=${{ parameters.location }}"
        fi
    env:
      ARM_CLIENT_ID: $(servicePrincipalId)
      ARM_CLIENT_SECRET: $(servicePrincipalKey)
      ARM_TENANT_ID: $(tenant_id)
      ARM_SUBSCRIPTION_ID: $(subscription_id)

      TF_VAR_env_prefix: ${{ parameters.env_prefix }}
      TF_VAR_location: ${{ parameters.location }}
      TF_VAR_sql_admin_login: $(sql_admin_login)
      TF_VAR_sql_admin_password: $(sql_admin_password)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform outputs'
    condition: and(succeeded(), eq('${{ parameters.action }}','apply'))
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/tf-outputs.json'
      ArtifactName: 'tf-outputs'
      publishLocation: 'Container'
